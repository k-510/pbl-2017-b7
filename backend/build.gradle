/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

def DEFAULT_PROFILE = 'development'
def profile = project.getProperties().getOrDefault("profile", DEFAULT_PROFILE)
def config = new ConfigSlurper(profile).parse(file("profiles.gradle").toURL())

[compileJava, compileTestJava]*.options*.encoding = 'utf-8'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    // api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //implementation 'com.google.guava:guava:21.0'

    // Use JUnit test framework
    //testImplementation 'junit:junit:4.12'
    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.25.1'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.25.1'
    compile 'org.glassfish.jersey.media:jersey-media-moxy:2.25.1'
    compile 'org.mongodb:mongo-java-driver:3.4.1'

    testCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.25.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.exparity:hamcrest-date:2.0.4'

}

def path = "/pbl-2017-b7"

task deployLocal(type: Exec, dependsOn: [war]) {
	group = 'Build'
	description = 'Deploy the generated war to Tomcat.'

    def auth = "${config.username}:${config.password}"
    def targetPath = "/manager/text/deploy?path=${path}&update=true"
    def url = "http://${auth}@${config.hostname}:${config.portnumber}${targetPath}"

    // println "config: ${config}"
    commandLine "${config.curlpath}", "--upload-file", "build/libs/pbl-2017-b7.war", "${url}"
}

jacoco {
    toolVersion = "0.7.9"
}

// test タスク実行後，jacocoのレポート出力タスクを実行する．
test.doLast {
    tasks.jacocoTestReport.execute()
}
